server.port=8787

spring.application.name=spring-cloud-zuul

eureka.client.service-url.defaultZone=http://127.0.0.1:7878/eureka

################ zuul 路由配置 ####################
zuul.prefix=/api
# 将路径的 /user-provider/ 引到 eureka 的 spring-cloud-examples-user-provider 服务上
zuul.routes.spring-cloud-examples-user-provider.path=/user-provider/**


# 不支持写多个 ip 的方式（http://127.0.0.1:8000/,http://127.0.0.1:8001/）
# 可以写单个IP，但是这将导致 ribbon 失效
#zuul.routes.spring-cloud-examples-user-provider.url=http://127.0.0.1:8000/

## 1 ###################### 路由指定:URL指定  #############################
## URL匹配关键字，如果包含关键字就跳转到指定的URL中
#zuul.routes.book-product.path=/book-product/**
#zuul.routes.book-product.url=http://127.0.0.1:8083/

## 2 ###################### 路由指定:服务指定1  #############################
##将路径的/book-product/引到 eureka的e-book-product服务上
##规则：zuul.routes.路径名.path
##规则：zuul.routes.路径名.serviceId=eureka的服务名
##http://127.0.0.1:9010/book-product/product/list
##等同于
##http://127.0.0.1:9010/e-book-product/product/list
#zuul.routes.book-product.path=/book-product/**
#zuul.routes.book-product.serviceId=e-book-product

## 3 ###################### 路由指定:服务指定1   #############################
#zuul.routes后面跟着的是服务名，服务名后面跟着的是路径规则，这种配置方式更简单。
#zuul.routes.e-book-product.path=/book-product/**

## 4 ###################### 路由排除：排除某几个服务  #############################
##排除后，这个地址将为空 http://127.0.0.1:9010/e-book-product/product/list
## 多个服务逗号隔开
#zuul.ignored-services=e-book-product

## 5 ###################### 路由排除：排除所有服务  #############################
#由于服务太多，不可能手工一个个加，故路由排除所有服务，然后针对要路由的服务进行手工加
#zuul.ignored-services=*
#zuul.routes.e-book-consumer-hystrix.path=/book-consumer/**

## 6 ###################### 路由排除：排除指定关键字的路径  #############################
# 排除所有包括/list/的路径
#zuul.ignored-patterns=/**/list/**
#zuul.routes.e-book-product.path=/book-product/**

## 7 ###################### 路由添加前缀：为所有路径添加前缀  #############################
##http://127.0.0.1:9010/book-product/product/list
##必须改成
##http://127.0.0.1:9010/api/book-product/product/list
#zuul.prefix=/api
#zuul.routes.e-book-product.path=/book-product/**


################ zuul 限流配置 ####################
# 针对某个服务进行限流
#zuul.routes.book-product.path=/book-product/**
#zuul.routes.book-product.serviceId=e-book-product
#
##开启限流
#zuul.ratelimit.enabled=true
## 10s内请求超过5次，服务端就抛出异常，10s后可以恢复正常请求
zuul.ratelimit.policies.spring-cloud-examples-user-provider.limit=5
zuul.ratelimit.policies.spring-cloud-examples-user-provider.refresh-interval=10
##针对某个IP进行限流，不影响其他IP
#zuul.ratelimit.policies.book-product.type=origin

# 全局配置限流
zuul.ratelimit.enabled=true
zuul.ratelimit.respository=IN_MEMORY  # 限流控制数据存在在内存中，使用 ConcurrentHashMap 作为存在容器，也可以配置将数据保存在 redis 中
zuul.ratelimit.default-policy.limit=3
zuul.ratelimit.default-policy.refresh-interval=60
zuul.ratelimit.default-policy.type=origin


################ zuul 超时时间配置 ####################
# 第一层hystrix超时时间设置
# 默认情况下是线程池隔离，超时时间1000ms
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=8000

# 第二层ribbon超时时间设置：设置比第一层小
# 请求连接的超时时间: 默认5s
ribbon.ConnectTimeout=5000
# 请求处理的超时时间: 默认5s
ribbon.ReadTimeout=5000

# 开启 ribbon 失败重试功能（测试之后发现并没有起作用。。。）
spring.cloud.loadbalancer.retry.enabled=true
spring-cloud-examples-user-provider.ribbon.ConnectTimeout=250
spring-cloud-examples-user-provider.ribbon.ReadTimeout=1000
spring-cloud-examples-user-provider.ribbon.OkToRetryOnAllOperations=true
spring-cloud-examples-user-provider.ribbon.MaxAutoRetriesNextServer=2
spring-cloud-examples-user-provider.ribbon.MaxAutoRetries=1

